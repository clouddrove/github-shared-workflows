---
name: üì¶ Terraform Module Tag Release on Merge

on:
  workflow_call:

permissions:
  contents: write

jobs:
  release:
    name: üöÄ Release Changed Module
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect changed modules
        id: detect
        run: |
          git fetch --tags
          CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
            | grep '^terraform-aws-' \
            | cut -d '/' -f1 \
            | sort -u \
            | tr '\n' ' ')
          echo "changed=$CHANGED_DIRS" >> "$GITHUB_OUTPUT"

      - name: ‚ö†Ô∏è Prevent tag release.
        if: steps.detect.outputs.changed == ''
        run: |
          echo "No module changes detected. Skipping tag release."
          exit 0

      - name: üè∑Ô∏è Detect version bumps from commit messages
        if: steps.detect.outputs.changed != ''
        id: version_bump
        run: |
          COMMITS=$(git log ${{ github.event.before }}..${{ github.sha }} --pretty=%B)

          bump_map=""
          for module in ${{ steps.detect.outputs.changed }}; do
            bump="no-release" # default

            # read commits line by line, without subshell
            while IFS= read -r commit; do
              if echo "$commit" | grep -q "$module"; then
                if echo "$commit" | grep -qi "major"; then
                  bump="major"
                elif echo "$commit" | grep -qi "minor" && [ "$bump" != "major" ]; then
                  bump="minor"
                elif echo "$commit" | grep -qi "patch" && [ "$bump" = "no-release" ]; then
                  bump="patch"
                fi
              fi
            done <<< "$COMMITS"

            bump_map="$bump_map$module:$bump "
          done

          echo "bump_map=$bump_map" >> "$GITHUB_OUTPUT"

      - name: üîñ Bump version and tag modules
        if: steps.detect.outputs.changed != ''
        run: |
          for entry in ${{ steps.version_bump.outputs.bump_map }}; do
            module=$(echo $entry | cut -d':' -f1)
            bump=$(echo $entry | cut -d':' -f2)

            if [ "$bump" = "no-release" ]; then
              echo "‚ÑπÔ∏è No release requested for $module (commit had no bump label)"
              continue
            fi

            prefix="$module/"
            latest_tag=$(git tag --sort=-v:refname | grep "^$prefix" | grep -E '[0-9]+\.[0-9]+\.[0-9]+$' | cut -d '/' -f2 | head -n 1)
            version=${latest_tag:-0.0.0}
            IFS='.' read -r major minor patch <<< "$version"

            case "$bump" in
              major) major=$((major + 1)); minor=0; patch=0 ;;
              minor) minor=$((minor + 1)); patch=0 ;;
              patch) patch=$((patch + 1)) ;;
            esac

            new_version="$major.$minor.$patch"
            new_tag="$module/$new_version"

            if git rev-parse "$new_tag" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Tag $new_tag already exists. Skipping."
              continue
            fi

            echo "‚úÖ Creating tag: $new_tag"
            git tag "$new_tag"
            git push origin "$new_tag"
          done
...
