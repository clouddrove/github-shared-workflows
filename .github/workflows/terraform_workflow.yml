run-name: 'Terraform workflow' 
on: 
  workflow_call:
    inputs:
      working_directory:
        required: true
        type: string
        description: 'Root directory of the terraform where all resources exist.'
      provider:
        required: true
        type: string
        default: aws
        description: 'Cloud provider to run the workflow. e.g. azurerm, aws, GCp or Digitalocean'
      aws_region:
        required: false
        type: string
        default: us-east-2
        description: 'AWS region of terraform deployment.'
      gcp_region:
        required: false
        type: string
        description: 'GCP region of terraform deployment.'
      var_file:
        required: false
        type: string
        description: 'Terraform var file directory. e.g. vars/dev.tfvars'
      destroy:
        type: string
        default: false
        description: 'you want to destroy infra or not'
      approvers:
        required: false
        type: string
        description: 'Approvals list to approve apply or destroy'
      terraform_version:
        type: string
        default: 1.3.6
        description: 'Required erraform version  '
      timeout:
        required: false
        type: number
        description: 'Timeout for approval step'
    secrets:
      AZURE_CREDENTIALS:
        required: false
        description: 'Azure Credentials to install Azure in github runner.'
      AWS_ACCESS_KEY_ID:
        required: false
        description: 'AWS Access Key ID to install AWS CLI.'
      AWS_SECRET_ACCESS_KEY:
        required: false
        description: 'AWS Secret access key to install AWS CLI'
      AWS_SESSION_TOKEN:
        required: false
        description: 'AWS Session Token to install AWS CLI'
      GCP_SA_KEY:
        required: false
        description: 'GCP service account Secret access key to install GCP CLI'
      PROJECT_ID:
        required: false
        description: 'GCP Secret access key to install GCP CLI'
      DIGITALOCEAN_ACCESS_TOKEN:
        required: false
        description: 'Digitalocean access Token to install Digitalocean CLI'


jobs:
  terraform-workflow:
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install AWS CLI
        if: ${{ inputs.provider == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ inputs.aws_region }}

      - name: Install Azure CLI
        if: ${{ inputs.provider == 'azurerm' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Install GCP CLI
        if: ${{ inputs.provider == 'gcp' }}
        uses: google-github-actions/auth@v0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
          region: ${{ inputs.gcp_region }}

      - name: Install doctl
        if: ${{ inputs.provider == 'digitalocean' }}
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: 'Terraform Format'
        id: fmt
        uses: 'dflook/terraform-fmt-check@v1'
        with:
          actions_subcommand: 'fmt'

      - name: "Terraform Init"
        id: init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_subcommand: "init"
          tf_actions_version: ${{ inputs.terraform_version }}
          tf_actions_working_dir: ${{ inputs.working_directory }}
 
      - name: 'Terraform validate'
        if: ${{ inputs.destroy != 'true' }}
        id: validate
        uses: dflook/terraform-validate@v1
        with:
          tf_actions_working_dir: ${{ inputs.working_directory }}

      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          cd ${{ inputs.working_directory }}
          if [ "${{ inputs.destroy }}" = "true" ]; then
            if [ -n "${{ inputs.var_file }}" ]; then
              terraform plan -destroy -detailed-exitcode -out tfplan --var-file=${{ inputs.var_file }} || export exitcode=$?
            else
              terraform plan -destroy -detailed-exitcode -out tfplan || export exitcode=$?
            fi
          else
            if [ -n "${{ inputs.var_file }}" ]; then
              terraform plan -detailed-exitcode -out tfplan --var-file=${{ inputs.var_file }} || export exitcode=$?
            else
              terraform plan -detailed-exitcode -out tfplan || export exitcode=$?
            fi
          fi
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ inputs.working_directory }}/tfplan
          
      - name: Create String Output
        id: tf-plan-string
        run: |
          cd ${{ inputs.working_directory }}
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
      - name: "Accept plan or deny"
        uses: trstringer/manual-approval@v1
        timeout-minutes: ${{ inputs.timeout }}
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ inputs.approvers }}
          issue-title: "Terraform Plan for Infrastructure Update"
          issue-body: ${{ steps.tf-plan-string.outputs.summary }}
            
      - name: terraform apply
        if: ${{ inputs.destroy != 'true' }}
        run: |
          if [ -n "${{ inputs.var_file }}" ]; then
           cd ${{ inputs.working_directory }}
           terraform apply -var-file="${{ inputs.var_file }}" -auto-approve
          else
           cd ${{ inputs.working_directory }}
           terraform apply -auto-approve
          fi
          
      - name: Terraform destroy
        if: ${{ inputs.destroy == 'true' }}
        id: destroy
        run: |
          if [ -n "${{ inputs.var_file }}" ]; then
           cd ${{ inputs.working_directory }}
           terraform destroy -var-file="${{ inputs.var_file }}" -auto-approve
          else
           cd ${{ inputs.working_directory }}
           terraform destroy -auto-approve
          fi
