---
# Tf check workflow checks for min, max version, terraform fmt, terraform init & terraform validate in your terraform code.
name: tf-checks

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory where a complete example exists for the module.'
        required: false
        type: string
        default: './examples/complete/'
      provider:
        required: false
        type: string
        description: 'Cloud provider to run the workflow. e.g. azurerm or aws or gcp'
      terraform_version:
        description: 'Terraform version to use. Leave empty for the latest version.'
        required: false
        type: string
      aws_credentials:
        description: 'AWS credentials to use.'
        required: false
        default: false
        type: string
      gcp_credentials:
        description: 'GCP credentials to use.'
        required: false
        default: false
        type: string
      token_format:
        required: false
        type: string
        default: access_token
        description: 'Output format for the generated authentication token. For OAuth 2.0 access tokens, specify "access_token". For OIDC tokens, specify "id_token". To skip token generation, leave this value empty'
      access_token_lifetime:
        required: false
        type: string
        default: 300s
        description: 'Desired lifetime duration of the access token, in seconds'
      project_id:
        required: false
        type: string
        description: 'ID of the default project to use for future API calls and invocations.'
      create_credentials_file:
        required: false
        type: string
        default: true
        description: 'If true, the action will securely generate a credentials file which can be used for authentication via gcloud and Google Cloud SDKs.'
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'aws access keys'
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: 'aws secret access keys'
        required: false
      GCP_CREDENTIALS:
        description: 'The Google Cloud JSON service account key to use for authentication'
        required: false
      WORKLOAD_IDENTITY_PROVIDER:
        required: false
        description: 'The full identifier of the Workload Identity Provider'
      SERVICE_ACCOUNT:
        required: false
        description: 'The service account to be used'


jobs:
  # - Terraform version extract as output.
  versionExtract:
    name: Get min/max versions
    runs-on: ubuntu-latest

    outputs:
      minVersion: ${{ steps.minMax.outputs.minVersion }}
      maxVersion: ${{ steps.minMax.outputs.maxVersion }}

    steps:
      # - Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # - Checking terraform Max and Min version.
      - name: Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@main

  # - Evaluating terraform version based on version extract
  versionEvaluate:
    name: Evaluate Terraform versions
    runs-on: ubuntu-latest
    needs: versionExtract
    strategy:
      fail-fast: false
      matrix:
        version:
          - ${{ needs.versionExtract.outputs.minVersion }}
          - ${{ needs.versionExtract.outputs.maxVersion }}
        directory:
          - ${{ inputs.working_directory }}

    steps:
      # - Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        if: ${{ inputs.aws_credentials == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 'Authenticate to Google Cloud'
        if: ${{ inputs.provider == 'gcp' }}
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          create_credentials_file: ${{ inputs.create_credentials_file }}
          token_format: ${{ inputs.token_format }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          access_token_lifetime: ${{ inputs.access_token_lifetime }}
          project_id: ${{ inputs.project_id }}

      # - Installing terraform version based on version extract.
      - name: Install Terraform v${{ inputs.terraform_version || needs.versionExtract.outputs.maxVersion }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version || needs.versionExtract.outputs.maxVersion }}

      # - Terraform checks to Init and Validate terraform code.
      - name: Init & validate v${{ matrix.version }}
        run: |
          cd ${{ matrix.directory }}
          terraform init
          terraform validate

# Action to verify terraform formatting.
  format:
    name: Check code format
    runs-on: ubuntu-latest
    needs: [versionExtract, versionEvaluate]

    steps:
      # - Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # - Action added to install terraform
      - name: Install Terraform v${{ inputs.terraform_version || needs.versionExtract.outputs.maxVersion }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version || needs.versionExtract.outputs.maxVersion }}

      # - Running command to check terraform formatting changes.
      - name: Check Terraform format changes
        run: terraform fmt --recursive -check=true
...
