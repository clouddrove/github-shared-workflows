name: Smurf Terraform
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
        description: 'AWS Access Key ID for direct authentication'
      AWS_SECRET_ACCESS_KEY:
        required: false
        description: 'AWS Secret Access Key for direct authentication'
      AWS_SESSION_TOKEN:
        required: false
        description: 'AWS Session Token for direct authentication'
      AWS_ROLE_TO_ASSUME:
        required: false
        description: 'AWS Role ARN defined'
        
    inputs:
      command:
        description: 'Command to run with tool'
        type: string
        required: false
      aws-region:
        description: 'AWS region'
        type: string
        default: 'us-east-1'
      provider:
        description: 'Cloud provider (aws, azure, gcp, digitalocean)'
        type: string
        required: false
        default: 'aws'
      aws_auth_method:
        description: 'AWS Auth method to use'
        type: string
        required: false
        default: 'oidc'

      ## Terraform Inputs
      terraform_directory:
        description: 'Terraform Directory'
        type: string
        required: false
      terraform_destroy:
        description: 'Terraform Destroy'
        type: string
        required: false
        default: 'false'
      terraform_enable:
        description: 'Terraform Enable'
        type: string
        required: false
        default: 'false'
      terraform_version:
        type: string
        default: 1.3.6
        description: 'Required erraform version'

jobs:
  terraform-format-init-validate:
    if: inputs.terraform_enable == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: format -r
      
      - name: Terraform Init
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: init --dir=${{ inputs.terraform_directory }}

      - name: Terraform Validate
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: validate --dir=${{ inputs.terraform_directory }}

  terraform-execution:
    if: inputs.terraform_enable == 'true'
    runs-on: ubuntu-latest
    needs: terraform-format-init-validate
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS credentials with OIDC
        if: inputs.aws_auth_method == 'oidc'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws-region }}
         
      - name: Configure AWS credentials with access keys
        if: inputs.aws_auth_method == 'keys'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ inputs.aws-region }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          if [[ -n "$AWS_SESSION_TOKEN" ]]; then
            aws configure set aws_session_token $AWS_SESSION_TOKEN
          fi
          aws configure set region $AWS_REGION
          
      - name: Set environment variables
        run: |
          echo "AWS_DEFAULT_REGION=${{ inputs.aws-region }}" >> $GITHUB_ENV
          echo "TOOL=terraform" >> $GITHUB_ENV
          echo "PROVIDER=${{ inputs.provider }}" >> $GITHUB_ENV

      - name: Terraform Init
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: init --dir=${{ inputs.terraform_directory }}

      - name: Set environment variables
        run: |
          (
          cat <<'_EOT'
          ${{ secrets.env-vars }}
          _EOT
          ) >> "$GITHUB_ENV"

      - name: Terraform Plan
        uses: clouddrove/smurf@v1.0.4
        with: 
          tool: stf
          command: plan --dir=${{ inputs.terraform_directory }}

      - name: "Accept plan or deny"
        uses: trstringer/manual-approval@v1
        timeout-minutes: ${{ inputs.timeout }}
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: ${{ inputs.minimum-approvals }}
          issue-title: "Terraform Plan for Infrastructure Update"

      - name: Terraform Apply
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: apply --auto-approve --dir=${{ inputs.terraform_directory }}

  terraform-destroy:
    if: inputs.terraform_destroy == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS credentials with OIDC
        if: inputs.aws_auth_method == 'oidc'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws-region }}

      - name: Configure AWS credentials with access keys
        if: inputs.aws_auth_method == 'keys'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ inputs.aws-region }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          if [[ -n "$AWS_SESSION_TOKEN" ]]; then
            aws configure set aws_session_token $AWS_SESSION_TOKEN
          fi
          aws configure set region $AWS_REGION
          
      - name: Set environment variables
        run: |
          echo "AWS_DEFAULT_REGION=${{ inputs.aws-region }}" >> $GITHUB_ENV
          echo "TOOL=terraform" >> $GITHUB_ENV
          echo "PROVIDER=${{ inputs.provider }}" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          (
          cat <<'_EOT'
          ${{ secrets.env-vars }}
          _EOT
          ) >> "$GITHUB_ENV"

      - name: Terraform Init
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: init --dir=${{ inputs.terraform_directory }}

      - name: Terraform Plan
        uses: clouddrove/smurf@v1.0.4
        with: 
          tool: stf
          command: plan --dir=${{ inputs.terraform_directory }}

      - name: "Accept plan or deny"
        uses: trstringer/manual-approval@v1
        timeout-minutes: ${{ inputs.timeout }}
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ inputs.approvers }}
          minimum-approvals: ${{ inputs.minimum-approvals }}
          issue-title: "Terraform Plan for Infrastructure Update"

      - name: Terraform Destroy
        uses: clouddrove/smurf@v1.0.4
        with:
          tool: stf
          command: destroy --auto-approve --dir=${{ inputs.terraform_directory }}