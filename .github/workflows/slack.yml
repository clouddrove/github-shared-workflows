---
name: Slack Notify (CloudDrove Style)
on:
  workflow_call:
    inputs:
      channel:
        type: string
        required: true
        description: 'Slack channel #name or ID'
      title:
        type: string
        required: true
        description: Short action title, e.g., EKS Cluster Spin-up
      status:
        type: string
        required: true
        description: success|failed|cancelled|warning|info
      fields_json:
        type: string
        required: false
        default: '[]'
        description: JSON array of {label,value}
      body_md:
        type: string
        required: false
        default: ""
        description: Optional Markdown body (e.g., commands/logs)
      button_text:
        type: string
        required: false
        default: Open Run
      button_url:
        type: string
        required: false
        default: ""
      logo_url:
        type: string
        required: false
        default: https://clouddrove.com/logo.png
      brand:
        type: string
        required: false
        default: CloudDrove
      link_to_run:
        type: boolean
        required: false
        default: true
    secrets:
      SLACK_BOT_TOKEN:
        required: true
jobs:
  send:
    runs-on: ubuntu-latest
    steps:
      - name: Build payload (Block Kit)
        id: build
        shell: bash
        env:
          CHANNEL: ${{ inputs.channel }}
          TITLE: ${{ inputs.title }}
          STATUS: ${{ inputs.status }}
          FIELDS_JSON: ${{ inputs.fields_json }}
          BODY_MD: ${{ inputs.body_md }}
          BUTTON_TEXT: ${{ inputs.button_text }}
          BUTTON_URL: ${{ inputs.button_url }}
          LOGO_URL: ${{ inputs.logo_url }}
          BRAND: ${{ inputs.brand }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          LINK_TO_RUN: ${{ inputs.link_to_run }}
          ACTOR: ${{ github.actor }}
          REF: ${{ github.ref }}
          SHA: ${{ github.sha }}
        run: |
          set -e

          # Map status -> emoji (you can tweak)
          case "${STATUS,,}" in
            success)  EMOJI="✅";;
            failed)   EMOJI="❌";;
            cancelled)EMOJI="⚠️";;
            warning)  EMOJI="⚠️";;
            info|*)   EMOJI="ℹ️";;
          esac

          # Default fields (always appended)
          DEFAULT_FIELDS=$(jq -n --arg ref "$REF" --arg sha "$SHA" --arg actor "@$ACTOR" \
            '[ {"label":"Ref","value":$ref},
               {"label":"Commit","value":$sha},
               {"label":"Actor","value":$actor}
             ]')

          # Merge custom + default fields
          FIELDS=$(jq -c -n \
            --argjson a "${FIELDS_JSON}" \
            --argjson b "${DEFAULT_FIELDS}" \
            '$a + $b')

          # Build Block Kit "fields" array
          FIELDS_BLOCK=$(jq -c '[ .[] | {type:"mrkdwn", text: ("*"+.label+"*:\n`"+.value+"`")} ]' <<<"$FIELDS")

          # Optional body section
          if [ -n "$BODY_MD" ]; then
            BODY_BLOCK=$(jq -c -n --arg t "$BODY_MD" \
              '{ "type":"section", "text": { "type":"mrkdwn", "text": $t } }')
          else
            BODY_BLOCK="null"
          fi

          # Context line with logo + brand + run link
          if [ "$LINK_TO_RUN" = "true" ]; then
            CTX_TEXT="*by '"$BRAND"'* • <'"$RUN_URL"'|View GitHub Run>"
          else
            CTX_TEXT="*by '"$BRAND"'*"
          fi

          CONTEXT_BLOCK=$(jq -n -c --arg logo "$LOGO_URL" --arg t "$CTX_TEXT" \
            '{ "type":"context", "elements": [
                { "type":"image", "image_url": $logo, "alt_text": "brand" },
                { "type":"mrkdwn", "text": $t }
              ] }')

          # Optional button row
          if [ -n "$BUTTON_URL" ]; then
            ACTIONS=$(jq -n -c --arg txt "$BUTTON_TEXT" --arg url "$BUTTON_URL" \
              '{ "type":"actions",
                 "elements":[ { "type":"button","text":{"type":"plain_text","text":$txt},"url":$url,"style":"primary"} ] }')
          else
            ACTIONS="null"
          fi

          # Assemble blocks
          jq -n \
            --arg ch "$CHANNEL" \
            --arg title "$EMOJI $TITLE — ${STATUS^^}" \
            --argjson fields "$FIELDS_BLOCK" \
            --argjson context "$CONTEXT_BLOCK" \
            --argjson body "$BODY_BLOCK" \
            --argjson actions "$ACTIONS" \
            '{
              channel: $ch,
              blocks: [
                { "type":"header", "text":{"type":"plain_text","text":$title,"emoji":true} },
                $context,
                { "type":"section", "fields": $fields },
                ( $body // empty ),
                ( $actions // empty )
              ]
            }' > payload.json

          echo "payload=$(jq -c . payload.json)" >> $GITHUB_OUTPUT

      - name: Send to Slack
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          payload: ${{ steps.build.outputs.payload }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
...
