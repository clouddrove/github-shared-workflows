---
name: Slack Notify (CloudDrove Style)

on:
  workflow_call:
    inputs:
      channel:
        type: string
        required: true
      title:
        type: string
        required: true
      status:
        type: string
        required: true
      fields_json:
        type: string
        required: false
        default: '[]'
      body_md:
        type: string
        required: false
        default: ""
      button_text:
        type: string
        required: false
        default: Open Run
      button_url:
        type: string
        required: false
        default: ""
      logo_url:
        type: string
        required: false
        default: https://clouddrove.com/logo.png
      brand:
        type: string
        required: false
        default: CloudDrove
      link_to_run:
        type: boolean
        required: false
        default: true
    secrets:
      SLACK_BOT_TOKEN:
        required: true

jobs:
  send:
    runs-on: ubuntu-latest
    steps:
      - name: Build Slack Payload
        id: build
        env:
          CHANNEL: ${{ inputs.channel }}
          TITLE: ${{ inputs.title }}
          STATUS: ${{ inputs.status }}
          FIELDS_JSON: ${{ inputs.fields_json }}
          BODY_MD: ${{ inputs.body_md }}
          BUTTON_TEXT: ${{ inputs.button_text }}
          BUTTON_URL: ${{ inputs.button_url }}
          LOGO_URL: ${{ inputs.logo_url }}
          BRAND: ${{ inputs.brand }}
          LINK_TO_RUN: ${{ inputs.link_to_run }}
          REF: ${{ github.ref }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ACTOR: ${{ github.actor }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          set -e

          # Emoji for status
          case "${STATUS,,}" in
            success) EMOJI="✅";;
            failed) EMOJI="❌";;
            cancelled|warning) EMOJI="⚠️";;
            info|*) EMOJI="ℹ️";;
          esac

          SHORT_SHA=${SHA:0:7}
          COMMIT_URL="https://github.com/${REPO}/commit/${SHA}"
          ACTOR_URL="https://github.com/${ACTOR}"

          # Default fields with clickable actor link
          DEFAULT_FIELDS=$(jq -n \
            --arg ref "$REF" \
            --arg sha "$SHORT_SHA" \
            --arg sha_url "$COMMIT_URL" \
            --arg actor "@$ACTOR" \
            --arg actor_url "$ACTOR_URL" \
            --arg event "$EVENT_NAME" \
            '[ 
              {"label":"Ref","value":$ref},
              {"label":"Commit","value": ("<" + $sha_url + "|" + $sha + ">")},
              {"label":"Triggered By","value": ("<" + $actor_url + "|" + $actor + ">")},
              {"label":"Event","value":$event}
            ]')

          # Merge fields
          ALL_FIELDS=$(jq -c -n \
            --argjson a "${FIELDS_JSON}" \
            --argjson b "${DEFAULT_FIELDS}" \
            '$a + $b')

          # Slack field layout
          FIELD_ITEMS=$(jq -c '[ .[] | {
            type: "mrkdwn",
            text: ("*" + .label + "*:\n" + .value)
          } ]' <<<"$ALL_FIELDS")

          FIELD_BLOCK=$(jq -c -n --argjson fields "$FIELD_ITEMS" '{
            type: "section",
            fields: $fields
          }')

          # Optional body
          if [ -n "$BODY_MD" ]; then
            BODY_BLOCK=$(jq -c -n --arg t "$BODY_MD" \
              '{ "type":"section", "text": { "type":"mrkdwn", "text": $t } }')
          else
            BODY_BLOCK=null
          fi

          # Top header branding block
          HEADER_CONTEXT=$(jq -c -n --arg logo "$LOGO_URL" --arg brand "$BRAND" '{
            type: "context",
            elements: [
              { "type": "image", "image_url": $logo, "alt_text": "brand" },
              { "type": "mrkdwn", "text": "*\($brand)*" }
            ]
          }')

          # Footer branding block
          if [ "$LINK_TO_RUN" = "true" ]; then
            FOOTER_CONTEXT=$(jq -c -n --arg logo "$LOGO_URL" --arg brand "$BRAND" --arg url "$RUN_URL" '{
              type: "context",
              elements: [
                { "type": "image", "image_url": $logo, "alt_text": "brand" },
                { "type": "mrkdwn", "text": "*by \($brand)* • <\($url)|View GitHub Run>" }
              ]
            }')
          else
            FOOTER_CONTEXT=$(jq -c -n --arg logo "$LOGO_URL" --arg brand "$BRAND" '{
              type: "context",
              elements: [
                { "type": "image", "image_url": $logo, "alt_text": "brand" },
                { "type": "mrkdwn", "text": "*by \($brand)*" }
              ]
            }')
          fi

          # Optional button
          if [ -n "$BUTTON_URL" ]; then
            ACTIONS=$(jq -c -n --arg txt "$BUTTON_TEXT" --arg url "$BUTTON_URL" '{
              type: "actions",
              elements: [
                { "type":"button", "text": { "type":"plain_text", "text": $txt }, "url": $url, "style": "primary" }
              ]
            }')
          else
            ACTIONS=null
          fi

          # Final payload
          jq -n \
            --arg ch "$CHANNEL" \
            --arg title "$EMOJI $TITLE — ${STATUS^^}" \
            --argjson header "$HEADER_CONTEXT" \
            --argjson fields "$FIELD_BLOCK" \
            --argjson body "$BODY_BLOCK" \
            --argjson actions "$ACTIONS" \
            --argjson footer "$FOOTER_CONTEXT" '
            def optional(x): if x != null and x != "null" then [x] else [] end;

            {
              channel: $ch,
              blocks: (
                [ $header ]
                + [ { "type": "header", "text": { "type": "plain_text", "text": $title, "emoji": true } } ]
                + [ $fields ]
                + optional($body)
                + optional($actions)
                + [ $footer ]
              )
            }' > payload.json

          echo "payload=$(jq -c . payload.json)" >> $GITHUB_OUTPUT

      - name: Send to Slack
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          payload: ${{ steps.build.outputs.payload }}
          token: ${{ secrets.SLACK_BOT_TOKEN }}

...
